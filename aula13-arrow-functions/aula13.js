/*
üåü === AULA 13: ARROW FUNCTIONS === üåü

üéØ OBJETIVO: Aprender a sintaxe moderna das arrow functions (=>) 

üìö CONCEITOS ABORDADOS:
- ‚û°Ô∏è Sintaxe de arrow functions com =>
- üÜö Diferen√ßa entre fun√ß√£o tradicional e arrow function
- ‚ö° Simplifica√ß√£o de sintaxe para casos simples
- üìù Quando usar par√™nteses e chaves
- üîÑ Return impl√≠cito vs expl√≠cito

‚öôÔ∏è FUNCIONAMENTO:
- (par√¢metros) => { c√≥digo } - sintaxe b√°sica
- Um par√¢metro: pode omitir par√™nteses
- Uma express√£o: pode omitir chaves e return (return impl√≠cito)
- M√∫ltiplas linhas: necess√°rio chaves e return expl√≠cito
*/

//‚úÖ Compara√ß√£o: Fun√ß√£o an√¥nima tradicional (comentada)
// const soma = function (v1, v2) {
//   return v1 + v2;
// };
// console.log(soma(10, 5));

// ‚û°Ô∏è === ARROW FUNCTION COM M√öLTIPLAS LINHAS ===
const soma = (v1, v2) => {
  let res = v1 + v2;  // üìä Vari√°vel intermedi√°ria
  return res;         // üîÑ Return expl√≠cito necess√°rio
};
console.log(soma(10, 5));  // üéØ Resultado: 15

// ‚û°Ô∏è === ARROW FUNCTION COM RETURN SIMPLES ===
const nome = (n) => {
  return n;  // üîÑ Return expl√≠cito
};
console.log(nome("Get√∫lio Vargas"));  // üìù Retorna: "Get√∫lio Vargas"

// ‚ö° === ARROW FUNCTION SIMPLIFICADA ===
const adicionar = (n) => n + 10;  // üöÄ Return impl√≠cito, sem chaves
console.log(adicionar(10));       // üéØ Resultado: 20

// üõë === REGRAS DAS ARROW FUNCTIONS === üõë
// 1Ô∏è‚É£ Um par√¢metro: pode omitir par√™nteses ‚Üí n => n + 10
// 2Ô∏è‚É£ M√∫ltiplos par√¢metros: par√™nteses obrigat√≥rios ‚Üí (a,b) => a + b  
// 3Ô∏è‚É£ Uma express√£o: return impl√≠cito ‚Üí n => n + 10
// 4Ô∏è‚É£ M√∫ltiplas linhas: chaves e return expl√≠cito obrigat√≥rios
